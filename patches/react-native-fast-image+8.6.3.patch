diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
index 34fcf89..fd15766 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
@@ -1,7 +1,11 @@
 package com.dylanvann.fastimage;
 
+import static com.bumptech.glide.request.target.Target.SIZE_ORIGINAL;
 import static com.dylanvann.fastimage.FastImageRequestListener.REACT_ON_ERROR_EVENT;
 
+import static java.lang.Math.max;
+import static java.lang.Math.min;
+
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.drawable.Drawable;
@@ -12,6 +16,7 @@ import androidx.appcompat.widget.AppCompatImageView;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
 import com.bumptech.glide.request.Request;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableMap;
@@ -130,6 +135,60 @@ class FastImageViewWithUrl extends AppCompatImageView {
         }
 
         if (requestManager != null) {
+            DownsampleStrategy downsampleStrategy = new DownsampleStrategy() {
+//                Boolean wasTriggered = false;
+
+                @Override
+                public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {
+                    if (requestedWidth == SIZE_ORIGINAL || requestedHeight == SIZE_ORIGINAL) {
+                        return 1f;
+                    }
+
+                    float aspectRatio = calculateScaleFactor(
+                            (float) sourceWidth,
+                            (float) sourceHeight,
+                            (float) requestedWidth,
+                            (float) requestedHeight
+                    );
+
+                    return min(1f, aspectRatio);
+                }
+
+                private float calculateScaleFactor(float sourceWidth, float sourceHeight, float requestedWidth, float requestedHeight) {
+                    // ContentFit.Contain
+                    return min(
+                        requestedWidth / sourceWidth,
+                        requestedHeight / sourceHeight
+                    );
+
+                    // ContentFit.Cover
+//                    return max(
+//                            requestedWidth / sourceWidth,
+//                            requestedHeight / sourceHeight
+//                    );
+
+                    // ContentFit.Fill, ContentFit.None
+//                    return 1f;
+
+                    // ContentFit.ScaleDown
+//                    if (requestedWidth < sourceWidth || requestedHeight < sourceHeight) {
+//                        // The container is smaller than the image — scale it down and behave like `contain`
+//                        return min(
+//                            requestedWidth / sourceWidth,
+//                            requestedHeight / sourceHeight
+//                        );
+//                    } else {
+//                        // The container is bigger than the image — don't scale it and behave like `none`
+//                        return 1f;
+//                    }
+                }
+
+                @Override
+                public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {
+                    return SampleSizeRounding.QUALITY;
+                }
+            };
+
             RequestBuilder<Drawable> builder =
                     requestManager
                             // This will make this work for remote and local images. e.g.
@@ -139,6 +198,7 @@ class FastImageViewWithUrl extends AppCompatImageView {
                             //    - android.resource://
                             //    - data:image/png;base64
                             .load(imageSource == null ? null : imageSource.getSourceForLoad())
+                            .downsample(downsampleStrategy)
                             .apply(FastImageViewConverter
                                     .getOptions(context, imageSource, mSource)
                                     .placeholder(mDefaultSource) // show until loaded
